MODULE main

  FROZENVAR
    n : 0..255;
    fingers1 : array 0..1 of 0..255;
    fingers2 : array 0..1 of 0..255;
    fingers3 : array 0..1 of 0..255;

  VAR
    node1 : node(10, 20, fingers1);
    node2 : node(20, 30, fingers2);
    node3 : node(30, 10, fingers3);

  INIT
    (node1.mode = find_successor & node2.mode = waiting & node3.mode = waiting) |
    (node1.mode = waiting & node2.mode = find_successor & node3.mode = waiting) |
    (node1.mode = waiting & node2.mode = waiting & node3.mode = find_successor) ;

  ASSIGN
    init(fingers1[0]) := 20;
    init(fingers1[1]) := 30;

    init(fingers2[0]) := 30;
    init(fingers2[1]) := 10;

    init(fingers3[0]) := 10;
    init(fingers3[1]) := 20;

    next(node1.mode) :=
      case

        (node1.mode = find_successor &
          (node1.id >= node1.successor_id | (node1.id < n & n <= node1.successor_id)) &
          (node1.id <  node1.successor_id | (n > node1.id | n <= node1.successor_id))) : found_successor;

        (node1.mode = find_successor & !(
          (node1.id >= node1.successor_id | (node1.id < n & n <= node1.successor_id)) &
          (node1.id <  node1.successor_id | (n > node1.id | n <= node1.successor_id)))) : closest_preceding;

        node1.mode = waiting & node2.mode = next_node & node2.index = 1 : find_successor ;
        node1.mode = waiting & node3.mode = next_node & node3.index = 0 : find_successor ;

        node1.mode = closest_preceding : get_next_finger ;

        node1.mode = get_next_finger & node1.index >= 0 : test_finger ;
        node1.mode = get_next_finger & node1.index < 0 : find_successor ;

        node1.mode = test_finger &
          !(node1.index >= 2 | node1.index <= -1) &
          (node1.id >= n | (node1.id < fingers1[node1.index] & fingers1[node1.index] < n)) &
          (node1.id <  n | (fingers1[node1.index] > node1.id | fingers1[node1.index] < n)) : next_node ;

        node1.mode = test_finger &
          !(node1.index >= 2 | node1.index <= -1) &
          !((node1.id >= n | (node1.id < fingers1[node1.index] & fingers1[node1.index] < n)) &
          (node1.id <  n | (fingers1[node1.index] > node1.id | fingers1[node1.index] < n))) : get_next_finger ;

        node1.mode = next_node : waiting ;

        TRUE : node1.mode ;
      esac;

    next(node2.mode) :=
      case
        (node2.mode = find_successor &
          (node2.id >= node2.successor_id | (node2.id < n & n <= node2.successor_id)) &
          (node2.id <  node2.successor_id | (n > node2.id | n <= node2.successor_id))) : found_successor;

        (node2.mode = find_successor & !(
          (node2.id >= node2.successor_id | (node2.id < n & n <= node2.successor_id)) &
          (node2.id <  node2.successor_id | (n > node2.id | n <= node2.successor_id)))) : closest_preceding;

        node2.mode = waiting & node1.mode = next_node & node1.index = 0 : find_successor;
        node2.mode = waiting & node3.mode = next_node & node3.index = 1 : find_successor;

        node2.mode = closest_preceding : get_next_finger ;

        node2.mode = get_next_finger & node2.index >= 0 : test_finger ;
        node2.mode = get_next_finger & node2.index < 0 : find_successor ;

        node2.mode = test_finger &
          !(node2.index >= 2 | node2.index <= -1) &
          (node2.id >= n | (node2.id < fingers2[node2.index] & fingers2[node2.index] < n)) &
          (node2.id <  n | (fingers2[node2.index] > node2.id | fingers2[node2.index] < n)) : next_node ;

        node2.mode = test_finger &
          !(node2.index >= 2 | node2.index <= -1) &
          !((node2.id >= n | (node2.id < fingers2[node2.index] & fingers2[node2.index] < n)) &
          (node2.id <  n | (fingers2[node2.index] > node2.id | fingers2[node2.index] < n))) : get_next_finger ;

        node2.mode = next_node : waiting ;

        TRUE : node2.mode ;
      esac;

    next(node3.mode) :=
      case
        (node3.mode = find_successor &
          (node3.id >= node3.successor_id | (node3.id < n & n <= node3.successor_id)) &
          (node3.id <  node3.successor_id | (n > node3.id | n <= node3.successor_id))) : found_successor;

        (node3.mode = find_successor & !(
          (node3.id >= node3.successor_id | (node3.id < n & n <= node3.successor_id)) &
          (node3.id <  node3.successor_id | (n > node3.id | n <= node3.successor_id)))) : closest_preceding;

        node3.mode = waiting & node1.mode = next_node & node1.index = 1 : find_successor ;
        node3.mode = waiting & node2.mode = next_node & node2.index = 0 : find_successor ;

        node3.mode = closest_preceding : get_next_finger ;

        node3.mode = get_next_finger & node3.index >= 0 : test_finger ;
        node3.mode = get_next_finger & node3.index < 0 : find_successor ;

        node3.mode = test_finger &
          !(node3.index >= 2 | node3.index <= -1) &
          (node3.id >= n | (node3.id < fingers3[node3.index] & fingers3[node3.index] < n)) &
          (node3.id <  n | (fingers3[node3.index] > node3.id | fingers3[node3.index] < n)) : next_node ;

        node3.mode = test_finger &
          !(node3.index >= 2 | node3.index <= -1) &
          !((node3.id >= n | (node3.id < fingers3[node3.index] & fingers3[node3.index] < n)) &
            (node3.id <  n | (fingers3[node3.index] > node3.id | fingers3[node3.index] < n))) : get_next_finger ;

        node3.mode = next_node : waiting ;

        TRUE : node3.mode ;
      esac;

-- Correct successor always found
LTLSPEC
  ((G (n > 10 & n <= 20)) & (F node1.mode = found_successor)) xor
  ((G (n > 20 & n <= 30)) & (F node2.mode = found_successor)) xor
  ((G (n > 30 | n <= 10)) & (F node3.mode = found_successor));

-- Only one node in mode found_successor with others in mode waiting
LTLSPEC
  F G ((node1.mode = found_successor & node2.mode = waiting & node3.mode = waiting) |
       (node1.mode = waiting & node2.mode = found_successor & node3.mode = waiting) |
       (node1.mode = waiting & node2.mode = waiting & node3.mode = found_successor)) ;

-- When one node is in mode next_node, another node transitions into find_successor
LTLSPEC
  G (node1.mode = next_node -> X (node2.mode = find_successor | node3.mode = find_successor)) ;

LTLSPEC
  G (node2.mode = next_node -> X (node1.mode = find_successor | node3.mode = find_successor)) ;

LTLSPEC
  G (node3.mode = next_node -> X (node1.mode = find_successor | node2.mode = find_successor)) ;

-- Always exactly one node not in mode waiting
INVARSPEC
  node1.mode != waiting xor
  node2.mode != waiting xor
  node3.mode != waiting ;

-- Any time we excute the get_next_finger -> find_successor
-- transition, it is because we have an id that is equal to our node.
LTLSPEC
  ((node1.mode = get_next_finger & X (node1.mode = find_successor)) -> node1.id = n) &
  ((node2.mode = get_next_finger & X (node2.mode = find_successor)) -> node2.id = n) &
  ((node3.mode = get_next_finger & X (node1.mode = find_successor)) -> node3.id = n)

MODULE node(id_i, successor_id_i, fingers_i)

  FROZENVAR
    id : 0..255;
    successor_id : 0..255;

  VAR
    index : -1..2;
    mode : {
      waiting,
      find_successor,
      found_successor,
      closest_preceding,
      get_next_finger,
      test_finger,
      next_node
    };

  DEFINE
    fingers := fingers_i;

  ASSIGN
    init(id) := id_i;
    init(successor_id) := successor_id_i;
    init(index) := 2;

    next(index) :=
      case
        index = -1 : 2;
        mode = get_next_finger : index - 1;
        TRUE : index ;
      esac;

-- Index is max whenever mode is closest preceding
INVARSPEC
  mode = closest_preceding -> index = 2

-- There is a cycle of find_successor -> closest_preceding -> get_next_finger. This check ensure that we never
-- get stuck in that cycle because any time the get_next_finger -> find_successor transition is executed,
-- the following state is a terminal state.
--
-- We also know that we don't get stuck in this cycle because we have another check that there is a persistent
-- state with one node in found_successor mode.
LTLSPEC
  ((mode = get_next_finger & X (mode = find_successor)) -> X (X (mode = found_successor)))

-- Verify correct sequence of modes
LTLSPEC
  G ((mode = find_successor) -> X (mode = found_successor | mode = closest_preceding));

LTLSPEC
  G ((mode = waiting) -> X (mode = find_successor | mode = waiting));

LTLSPEC
  G ((mode = closest_preceding) -> X (mode = get_next_finger));

LTLSPEC
  G ((mode = get_next_finger) -> X (mode = test_finger | mode = find_successor));

LTLSPEC
  G ((mode = test_finger) -> X (mode = get_next_finger | mode = next_node));

LTLSPEC
  G ((mode = next_node) -> X (mode = waiting));
